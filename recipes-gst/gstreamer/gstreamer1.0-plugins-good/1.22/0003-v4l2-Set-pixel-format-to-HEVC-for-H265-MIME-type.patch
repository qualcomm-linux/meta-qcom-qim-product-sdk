From fcb8ddde5bad4fa1d546097334f1b88b266cfeb6 Mon Sep 17 00:00:00 2001
From: Raja Ganapathi Busam <quic_rbusam@quicinc.com>
Date: Thu, 16 Jan 2025 14:44:44 +0530
Subject: [PATCH] v4l2: Set pixel format to HEVC for H265 MIME type

- By default, video driver operates on H264 codec format.
- As per video driver's expectation, pixelformat has to be set first on
  CAPTURE port first and then OUTPUT port.

Upstream-Status: Inappropriate [Qualcomm specific]

Signed-off-by: Raja Ganapathi Busam <quic_rbusam@quicinc.com>
---
 sys/v4l2/gstv4l2videoenc.c | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/sys/v4l2/gstv4l2videoenc.c b/sys/v4l2/gstv4l2videoenc.c
index 7360279..33d025d 100644
--- a/sys/v4l2/gstv4l2videoenc.c
+++ b/sys/v4l2/gstv4l2videoenc.c
@@ -334,6 +334,40 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
   output = gst_video_encoder_set_output_state (encoder, outcaps, state);
   gst_video_codec_state_unref (output);
 
+  {
+    GstV4l2Object *v4l2object = GST_V4L2_OBJECT (self->v4l2capture);
+    struct v4l2_format format;
+    GstStructure *s;
+    const gchar *mimetype;
+
+    s = gst_caps_get_structure(outcaps, 0);
+    mimetype = gst_structure_get_name (s);
+
+    if (g_str_equal (mimetype, "video/x-h265")) {
+      memset (&format, 0x00, sizeof (struct v4l2_format));
+      format.type = v4l2object->type;
+      if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_G_FMT, &format) < 0) {
+        GST_ERROR_OBJECT (self, "Failed to call VIDIOC_G_FMT with error %s",
+            g_strerror (errno));
+        return FALSE;
+      }
+      GST_DEBUG_OBJECT (self, "Initial pixel format returned by VIDIOC_G_FMT: %"
+          GST_FOURCC_FORMAT, GST_FOURCC_ARGS (format.fmt.pix.pixelformat));
+
+      // Overriding the pixel format with H265
+      format.fmt.pix.pixelformat = V4L2_PIX_FMT_HEVC;
+      if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_S_FMT, &format) < 0) {
+        GST_ERROR_OBJECT (self, "Failed to call VIDIOC_S_FMT for format %"
+            GST_FOURCC_FORMAT " with error %s",
+            GST_FOURCC_ARGS (format.fmt.pix.pixelformat),
+            g_strerror (errno));
+        return FALSE;
+      }
+      GST_DEBUG_OBJECT (self, "Pixel format set to %" GST_FOURCC_FORMAT,
+          GST_FOURCC_ARGS (format.fmt.pix.pixelformat));
+    }
+  }
+
   if (!gst_video_encoder_negotiate (encoder))
     return FALSE;
 
